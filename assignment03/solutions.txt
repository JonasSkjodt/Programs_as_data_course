Exercise 3.3 

Note:
Which way is the optimal way of writing exercise 3.3? we've left two ways of doing it beneath and assigned it 3.3.1 and 3.3.2
(our answer is 3.3.1, but we've left 3.3.2 up)

3.3.1:

Main
Expr EOF                                            (Rule A)
Expr TIMES Expr                                     (Rule G)
Expr TIMES CSINT 3                                  (Rule C)
CSINT 2 TIMES CSINT 3                               (Rule C) 
Expr PLUS CSINT 2 TIMES CSINT 3                     (Rule H)
LPAR Expr RPAR PLUS CSINT 2 TIMES CSINT 3           (Rule E)
LPAR CSINT 17 RPAR PLUS CSINT 2 TIMES CSINT 3       (Rule C)
LET Expr IN NAME z PLUS CSINT 2 TIMES CSINT 3 END   (Rule F)
LET NAME z IN NAME z PLUS CSINT 2 TIMES CSINT 3 END (Rule B)

3.3.2:

Input                                       parse stack                                         
------------------------------------------- ---------------------------------------------- 
let z = (17) in z + 2 * 3 end EOF           Main                                 (Rule A)                                        
let z = (17) in z + 2 * 3 end               LET z EQ (17) IN z + 2 * 3 END       (Rule F)              
3                                           CSTINT                               (Rule C)    
2                                           CSTINT                               (Rule C) 
3*2                                         Expr TIMES Expr                      (Rule G)
z                                           Expr ::= NAME                        (Rule B)
z+2                                         Expr PLUS Expr                       (Rule H)
z+expr                                      Expr PLUS Expr                       (rule H)
17                                          CSTINT                               (rule C)
(17)                                        LPAR Expr RPAR                       (rule E)
z                                           Expr ::= NAME                        (rule B)



Exercise 3.4
See picture 3_4.png or use https://miro.com/app/board/uXjVLfqvZys=/

Exercise 3.5 
See picture 3_5.png

Exercise 3.6
See picture 3_6.png

Exercise 3.7
You can see the extended functionalty in ExprPar.fsy and ExprLex.fsl.
we've only added the F#/ML-style: IF THEN ELSE, we didnt add the lightweight C/C++/Java/C#-style versions.
