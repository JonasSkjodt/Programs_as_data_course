4.1
Going through the readme.txt shows everything is working fine.


4.2
in the first 3 exercises we created the functions to make it work.


In the 4th eval was changed from:
    let fBodyEnv = (x, xVal) :: (f, fClosure) :: fDeclEnv (static)
    to 
    let fBodyEnv = (x, xVal) :: (f, fClosure) :: env (dynamic)
This ensured that the var "i" always was using the last sat value in "i".

See image ex4.2.png for the results.


4.3
We modified Absyn.fs to permit a list of parameter names in Letfun and a list of argument expressions in Call.

We then modified Closure to have a string list and string value list:

    | Closure of string * (string) list * expr * (string * value) list

This was followed by changing the eval function in Fun.fs to work with the new abstract syntax.

    | Closure (f, xs, fBody, fDeclEnv) -> 
        let xVals = List.map (fun eArg -> Int(eval eArg env)) eArgs // xVals now takes all elements of the list and gets int value from the element and adds it to a new list. 
        let fBodyEnv = List.zip xs xVals @ (f, fClosure) :: fDeclEnv // List.zip takes two lists and combines them into a list of tuples.
        eval fBody fBodyEnv



4.4
POW, MAX2 and MAX3 inserted. Tests were run from Parse.fs with ex6 and ex7.

See image ex4_4.png for results.


4.5
We extended the (untyped) functional language with infix operator “&&” meaning sequential logical “and”
and infix operator “||” meaning sequential logical “or” in FunPar.fsy as seen here:

    | Expr AND   Expr                     { If($1, $3, CstB false) }
    | Expr OR    Expr                     { If($1, CstB true, $3)  }

we also made sure to give it a token, as seen here:

    %token AND OR

Furthermore, FunLex was changed to have the following added:

    | "&&"            { AND }
    | "||"            { OR }

See image ex4_5.png for results.